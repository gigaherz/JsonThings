plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev.legacyforge' version '2.0.72'
}

version = "0.9.9-beta"
group= "dev.gigaherz.jsonthings"

base {
    archivesName = "JsonThings-1.20.1"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
    maven {
        url 'https://repo.spongepowered.org/repository/maven-public/'
        content {
            includeGroup "org.spongepowered"
        }
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    flatDir {
        dirs project.rootProject.file("./debugmods")
    }
}

legacyForge {
    version = "1.20.1-47.3.22"

    mixin {
        add sourceSets.main, "jsonthings.refmap.json"
        config "jsonthings.mixins.json"
    }

    runs {
        // applies to all the run configs below
        configureEach {
            gameDirectory = project.file('run')
            logLevel = org.slf4j.event.Level.DEBUG
        }

        client {
            client()
        }

        server {
            server()
        }
    }

    mods {
        thismod {
            sourceSet(sourceSets.main)
        }
    }

    parchment {
        minecraftVersion = "1.20.1"
        mappingsVersion = "2023.09.03"
    }
}

dependencies {
    compileOnly 'org.jetbrains:annotations:24.0.1'

    //library 'com.google.guava:guava:21.0'
    //runtimeOnly fg.deobf("useless:Botania:1.18.2.433")
    //runtimeOnly fg.deobf("useless:curios-forge-1.18.2:5.0.7.0")
    //runtimeOnly fg.deobf("useless:Patchouli:1.18.2.69")

    modImplementation "curse.maven:rhino-416294:4085695"

    /*library 'org.graalvm.regex:regex:22.0.0.2'
    library 'org.graalvm.sdk:graal-sdk:22.0.0.2'
    library 'org.graalvm.truffle:truffle-api:22.0.0.2'
    library 'org.graalvm.js:js:22.0.0.2'
    library 'org.graalvm.js:js-scriptengine:22.0.0.2'*/

    annotationProcessor 'org.spongepowered:mixin:0.8.+:processor'
}

java {
    withSourcesJar()
}

tasks.named("jar") {

    from(files('LICENSE.txt'))

    manifest {
        attributes([
                "Specification-Title": "jsonthings",
                "Specification-Vendor": "gigaherz",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor" :"gigaherz",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "jsonthings.mixins.json"
        ])
    }
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

project.afterEvaluate {
    publish.dependsOn('build')
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId project.archivesBaseName
                from components.java

                pom.withXml {
                    asNode().dependencies.dependency.each { dep ->
                        if (dep.version.last().value().last().contains("mapped")) {
                            assert dep.parent().remove(dep)
                        }
                    }
                }
            }
        }

        repositories {
            if (findProperty("RELEASE") && System.env.giga_maven_host != null) {
                System.out.println("Remote publish enabled on " + System.env.giga_maven_host)
                maven {
                    url System.env.giga_maven_host
                    credentials {
                        username System.env.giga_maven_user
                        password System.env.giga_maven_password
                    }
                }
            }
            else {
                System.out.println("Remote publish disabled.")
                maven {
                    url "$projectDir/../CommonMaven"
                }
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}