buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'maven-publish'

version = "0.4.14"
group= "dev.gigaherz.jsonthings" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "JsonThings-UNKNOWN"

project.afterEvaluate {
    archivesBaseName = "JsonThings-${project.MC_VERSION}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
    maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

mixin {
    add sourceSets.main, "jsonthings.refmap.json"
}

minecraft {
    //mappings channel: 'official', version: '1.18.2'
    mappings channel: 'parchment', version: '2022.09.04-1.18.2'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'

            arg "--mixin=jsonthings.mixins.json"

            ideaModule "${project.name}.main"

            mods {
                thismod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'

            arg "--mixin=jsonthings.mixins.json"

            ideaModule "${project.name}.main"

            mods {
                thismod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'jsonthings', '--all', '--output', file('src/main/generated_resources/'), '--existing', file('src/main/resources/')

            mods {
                thismod {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    flatDir {
        dirs project.rootProject.file("./debugmods")
    }
}

/*configurations {
    library
    implementation.extendsFrom library
}
minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}*/
dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.2.9'

    //library 'com.google.guava:guava:21.0'
    //runtimeOnly fg.deobf("useless:Botania:1.18.2.433")
    //runtimeOnly fg.deobf("useless:curios-forge-1.18.2:5.0.7.0")
    //runtimeOnly fg.deobf("useless:Patchouli:1.18.2.69")

    implementation fg.deobf("curse.maven:rhino-416294:4069880")

    /*library 'org.graalvm.regex:regex:22.0.0.2'
    library 'org.graalvm.sdk:graal-sdk:22.0.0.2'
    library 'org.graalvm.truffle:truffle-api:22.0.0.2'
    library 'org.graalvm.js:js:22.0.0.2'
    library 'org.graalvm.js:js-scriptengine:22.0.0.2'*/

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    from('/') {
        include 'LICENSE.txt'
    }

    manifest {
        attributes([
                "Specification-Title": "eyes",
                "Specification-Vendor": "gigaherz",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor" :"gigaherz",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "jsonthings.mixins.json"
        ])
    }
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

project.afterEvaluate {
    publish.dependsOn('build')
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId project.archivesBaseName
                from components.java

                //artifact sourceJar

                pom.withXml {
                    asNode().dependencies.dependency.each { dep ->
                        if (dep.groupId.last().value().last() in ["net.minecraftforge", "useless", "curse.maven"]) {
                            assert dep.parent().remove(dep)
                        }
                    }
                }
            }
        }

        repositories {
            if (findProperty("RELEASE") && System.env.giga_maven_host != null) {
                System.out.println("Remote publish enabled on " + System.env.giga_maven_host)
                maven {
                    url System.env.giga_maven_host
                    credentials {
                        username System.env.giga_maven_user
                        password System.env.giga_maven_password
                    }
                }
            }
            else {
                System.out.println("Remote publish disabled.")
                maven {
                    url "$projectDir/../CommonMaven"
                }
            }
        }
    }
}
